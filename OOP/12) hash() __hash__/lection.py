# Если объекты a == b (равны), то равен и их хэш.
# Если равны хеши: hash(a) == hash(b), то объекты могут быть равны, но могут быть и не равны.
# Если хеши не равны: hash(a) != hash(b), то объекты точно не равны.

# hash("Python")  ПРИМЕНЯЕТСЯ ТОЛЬКО К НЕИЗМЕНЯЕМЫМ ОБЪЕКТАМ - ЧИСЛО, СТРОКА, КОРТЕЖ
# hash(123)
# hash((1, 2, 3))

d = {}
d[5] = 5
d["python"] = "py"
d[(1, 2, 3)] = [1, 2, 3]
# (хэш ключа, ключ) - ЗАЧЕМ ВЫЧИСЛЯТЬ ХЭШ КЛЮЧА?

# Во-первых, нужная запись в словаре ищется по ХЭШУ ключу, а уже потом, если хэш одинаковый, то по значению ключа (для реализации поиска О(1))

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
    
    def __hash__(self):
        return hash((self.x, self.y))

p1 = Point(1, 2)
p2 = Point(1, 2)

print(hash(p1), hash(p2), sep='\n') # хэши разные, если не определен маг. метод __hash__
                                    # хэши равные, если определен маг. метод __hash__

print(p1 == p2) # если такой оператор выдает False - то объекты разные

d = {}
d[p1] = 1
d[p2] = 2
print(d) # всего 1 ключ получится, так как объекты p1 и p2 определены как один и тот же ключ для словаря
